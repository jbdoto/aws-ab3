---
AWSTemplateFormatVersion: '2010-09-09'
Description: IntSiteCallerBucketConfiguration
Transform: AWS::Serverless-2016-10-31

Parameters:
  ResourcePrefixLowercase:
    Type: String
    Default: intsitecaller
  ContainerName:
    Type: String
    Default: intsitecaller-upload-handler
  LambdaFunctionName:
    Type: String
    Default: intsitecaller-upload-handler
  ContainerTag:
    Type: String
    Default: "1.0.0"
  StateMachineName:
    Type: String
    Default: intsitecaller
  StateMachineVersion:
    Type: String
    Default: "1_0_0"

Resources:

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ResourcePrefixLowercase}-logs
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  FileUploadLambdaHandler:
    Type: AWS::Serverless::Function
    DependsOn: LogsBucket
    Properties:
      ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerName}:${ContainerTag}
      Description: Invoke a function to create a log stream.
      MemorySize: 128
      Timeout: 30
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      #      Tracing: Active
      #Handler: index.handler
      #      Runtime: python3.8
      FunctionName: !Sub ${LambdaFunctionName}
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachineName}-${StateMachineVersion}
          RUN_COMMAND: "Rscript /intSiteCaller/intSiteCaller.R"
          SERIAL_WAIT: "TRUE"
          JOB_TYPE: "PARENT"

      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:              
              source:
                - aws.s3
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - s3.amazonaws.com
                eventName:
                  - CopyObject
                  - PutObject
                  - CompleteMultipartUpload
                  - RestoreObject
                requestParameters:
                  bucketName:
                    - !Ref SamplesBucket
                  key:
                    - prefix: 'samples/'

  CloudTrailBucketPolicy:
    DependsOn:
      - SamplesBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SamplesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:GetBucketAcl"
            Resource: !Sub arn:aws:s3:::${SamplesBucket}
          - Sid: "AWSCloudTrailWrite"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "*"
            Resource: !Sub arn:aws:s3:::${SamplesBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

    # Enable CloudTrail
  SamplesBucketCloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - SamplesBucket
      - CloudTrailBucketPolicy
    Properties:
      S3BucketName: !Ref SamplesBucket
      IsLogging: true
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub "arn:aws:s3:::${SamplesBucket}/samples"
  SamplesBucket:
    Type: AWS::S3::Bucket
    DependsOn: LogsBucket
    Properties:
      BucketName: !Sub ${ResourcePrefixLowercase}-samples
      LoggingConfiguration:
        DestinationBucketName: !Sub ${LogsBucket}
        LogFilePrefix: !Sub ${ResourcePrefixLowercase}-samples/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: StateMachineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - states:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
              - Effect: Allow
                Action:
                  - batch:SubmitJob
                  - batch:DescribeJobs
                  - batch:ListJobs
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::*

  JobResultsBucket:
    Type: AWS::S3::Bucket
    DependsOn: LogsBucket
    Properties:
      BucketName: !Sub ${ResourcePrefixLowercase}-jobresults
      LoggingConfiguration:
        DestinationBucketName: !Sub ${LogsBucket}
        LogFilePrefix: !Sub ${ResourcePrefixLowercase}-jobresults/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

# aws cloudformation update-stack --stack-name IntSiteCallerBuckets --template-body file://code_cfn.yml --output text; aws cloudformation wait stack-update-complete --stack-name IntSiteCallerBuckets
